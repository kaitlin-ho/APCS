Soggy Crackers - Courtney, Kaitlin
APCS pd06

Activity 1
1)
  a) public static double sentimentVal( String word )
  b) A string parameter is required. It won't work if another parameter is passed.
  c)The method returns a double.
2)
   System.out.println(sentimentVal("train"));    0.03
   System.out.println(sentimentVal("crash"));    -2.05
   System.out.println(sentimentVal("phone"));    0.19
3)
  a) It would compile because the return type and parameters match.
  b) It would not compile because the return type and parameters don't match.
  c) It would not compile because the method only takes one String as the parameter.


Activity 2
1) [Review.java]
2) [Review.java]
3) [Review.java]
4) totalSentiment works by using the existing textToString method to create a string version
   of the input file. Then, the string is split into words and assigned to a String Array.
   Each element (in this case, word) in the array is inputted as the parameter to sentimentVal
   and the resulting value is added to the double variable, total, which keeps track of the
   total sentimentVal. After the forloop iteration is finished, the total is returned.
5)
  a) The ratings make sense because the stars are proportional to the value of totalSentiment.
     Any negative value of totalSentiment corresponds to 0 stars; any value greater than 9
     corresponds to 5 stars.
  b) totalSentiment can be adjusted
6) The logical error in the student's code is that every value of totalSentiment less than 15
   is counted as 4 stars, since there is no lower bound for the if statement. To fix this, the
   student would need to create bounds in his if statements. For example:
      if (totalSentiment < 15 && totalSentiment > 9) {}
      else if (totalSentiment < 10 && totalSentiment > 4) {}
   With the lower and upper bounds added to the if statements, each value of totalSentiment falls
   into its correct range and the function will return the correct starRating.


Activity 3
1) [SimpleReview.txt]
2) [SimpleReview.txt]
3) str.indexOf(x) finds where the first occurrence of x is in the specified string str. If x is a word,
   it will return the index of the first character. substring(x, y) will return the string from index x,
   inclusive, to index y, exclusive. To divide an existing string into two parts, we can use the
   substring method twice. It is necessary to add 1 to the position of the space when copying
   the remainder of the string because the ending index (y) is exclusive. substring(x, y) will return
   the part of the string from index x to index y-1. If we want the character at index y to be included,
   then one must be added to y.
4) [Review.java]
5) Static methods cannot use methods or variables that are non-static. To call a non-static method, a
   class object needs to be created; this is not the case for a static method because they do not belong
   to objects of a class. To call a static method, a dot-operator is used with the name of the class. Non-
   static methods are called with the object and a dot-operator.
6) Instead of calling on the randomAdjective method we could replace the adjectives with specifically
   negative or positive adjectives using our two lists of positve and negative adjectives.


Activity 4
1) A more negative review to make the restaurant seem bad.
2) A more positve review to make the restaurant seem good a
3) To create a stronger review, the method would have to include more adjectives (either positive or
   negative) to replace the starred ones.
       if (1){
        for(){
          review = randomPos + random Pos;
        }
       }
       if (2){
        for(){
          review = randomNeg + randomNeg;
        }
       }
4) [Review.java]
5) oneWord is now equal to the first letter of the string oneWord.
6) The word does not include * in cleanSentiment.csv, which is the list to get the sentiment value.
7) We can replace the adjectives with only strong positive adjectives. We can also add multiple
   positive adjectives in place of the one we will be replacing.


Activity 5
1) We chose to implement this program because censoring happens in real life and we wanted to try
   to recreate it.
2) We had an idea in mind, which was to replace every bad word in a text file with [REDACTED]. Then,
   we created some simple diagrams on paper and implemented it with code.
3) public static String removeNoNoWords( String fileName )
   We chose the given parameter because we need to parse through a list of words from a text and
   check if they are bad words or not. It is a String type because the file we are looking at will
   be .txt. The method is static because we do not have the need to create objects.
4)
   String[] splitString = text.split(" "); This is splitting the String at each space and adding each
   smaller piece into the array splitString. Nothing is returned.

5)

if (findBadWords(removePunctuation(splitString[x])) == true){
  if (x == splitString.length-1){
    splitString[x] = "[REDACTED].";
  }
  else{
    splitString[x] = "[REDACTED]";
  }

returnText += splitString[x] + " ";
}

  One other way that this code could be written to achieve the same result is to use a while loop
  if (findBadWords(removePunctuation(splitString[x])) == true){
  while (x==splitString.length-1){
    splitString[x] = "[REDACTED]";
    break;
  }
  splitString[x] = "[REDACTED].";
  }



6)
  for (int x = 0; x < splitString.length; x++){
    if (findBadWords(splitString[x]) == true){
      splitString[x] = "[REDACTED]";
    }
  returnText += splitString[x] + " ";
  }

  This loops works by iterating through splitString using a for loop during which the index the loop
  is looking at increases by one each time.

  int x = 0;
  while (x < splitString.length){
    if (findBadWords(splitString[x]) == true){
      splitString[x] = "[REDACTED]";
      }
  x += 1;
  returnText += splitString[x];
  }
